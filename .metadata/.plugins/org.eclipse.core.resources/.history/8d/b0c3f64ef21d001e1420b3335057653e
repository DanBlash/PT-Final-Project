package task.tracker.service;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Objects;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import task.tracker.controller.model.DailyTaskStep;
import task.tracker.controller.model.LifeGoalDailyTask;
import task.tracker.controller.model.LifeGoalData;
import task.tracker.dao.DailyTaskDao;
import task.tracker.dao.LifeGoalDao;
import task.tracker.dao.TaskStepDao;
import task.tracker.entity.DailyTask;
import task.tracker.entity.LifeGoal;
import task.tracker.entity.TaskStep;

@Service

public class TaskTrackerService {

	@Autowired
	private LifeGoalDao lifeGoalDao;

	@Autowired
	private DailyTaskDao dailyTaskDao;
	
	@Autowired
	private TaskStepDao taskStepDao;

	@Transactional(readOnly = false)
	public LifeGoalData saveLifeGoal(LifeGoalData lifeGoalData) {
		Long lifeGoalId = lifeGoalData.getLifeGoalId();
		LifeGoal lifeGoal = findOrCreateLifeGoal(lifeGoalId);
		copyLifeGoalFields(lifeGoal, lifeGoalData);
		return new LifeGoalData(lifeGoalDao.save(lifeGoal));
	}

	private void copyLifeGoalFields(LifeGoal lifeGoal, LifeGoalData lifeGoalData) {
		
		lifeGoal.setLifeGoalName(lifeGoalData.getLifeGoalName());
		lifeGoal.setActiveProgress(lifeGoalData.getActiveProgress());
		lifeGoal.setEstimatedTime(lifeGoalData.getEstimatedTime());
		lifeGoal.setDifficulty(lifeGoalData.getDifficulty());
	}

	private LifeGoal findOrCreateLifeGoal(Long lifeGoalId) {
		LifeGoal lifeGoal;

		if (Objects.isNull(lifeGoalId)) {
			lifeGoal = new LifeGoal();
		} else {
			lifeGoal = findLifeGoalById(lifeGoalId);
		}
		return lifeGoal;
	}

	private LifeGoal findLifeGoalById(Long lifeGoalId) {
		return lifeGoalDao.findById(lifeGoalId)
				.orElseThrow(() -> new NoSuchElementException("Life Goal with ID = " + lifeGoalId + " was not found."));
	}

	@Transactional(readOnly = false)
	public LifeGoalDailyTask saveDailyTask(Long lifeGoalId, LifeGoalDailyTask lifeGoalDailyTask) {

		LifeGoal lifeGoal = findLifeGoalById(lifeGoalId);
		Long dailyTaskId = lifeGoalDailyTask.getDailyTaskId();
		DailyTask dailyTask;
		
		
		if (Objects.isNull(dailyTaskId)) {
			dailyTask = createDailyTask(lifeGoalId, dailyTaskId);
		} else {
			dailyTask = findDailyTaskById(lifeGoalId, dailyTaskId);
			}
			
			copyDailyTaskFields(dailyTask, lifeGoalDailyTask);
			dailyTask.setLifeGoal(lifeGoal);
			lifeGoal.getDailyTasks();

		return new LifeGoalDailyTask(dailyTaskDao.save(dailyTask));
	}

	private void copyDailyTaskFields(DailyTask dailyTask, LifeGoalDailyTask lifeGoalDailyTask) {
		
		dailyTask.setNotes(lifeGoalDailyTask.getNotes());
		dailyTask.setTaskEstimatedTime(lifeGoalDailyTask.getTaskEstimatedTime());
		dailyTask.setTaskName(lifeGoalDailyTask.getTaskName());
		
	}

	private DailyTask createDailyTask(Long lifeGoalId, Long dailyTaskId) {		
		return new DailyTask();
	}
	
	private DailyTask findDailyTaskById(Long lifeGoalId, Long dailyTaskId) {
		DailyTask dailyTask = dailyTaskDao.findById(dailyTaskId).orElseThrow(
				() -> new NoSuchElementException("Daily Task with ID = " + dailyTaskId + " was not found."));
		return dailyTask;
	}
	
	@Transactional(readOnly = false)
	public LifeGoalDailyTask updateDailyTask(Long lifeGoalId, Long dailyTaskId,
			LifeGoalDailyTask lifeGoalDailyTask) {
				
		DailyTask dailyTask = findDailyTaskById(lifeGoalId, dailyTaskId);
		
		copyDailyTaskFields(dailyTask, lifeGoalDailyTask);
		
		return new LifeGoalDailyTask(dailyTaskDao.save(dailyTask));
	}
	

	public DailyTaskStep saveTaskStep(Long lifeGoalId, Long dailyTaskId, DailyTaskStep dailyTaskSteps) {

		LifeGoal lifeGoal = findLifeGoalById(lifeGoalId);
		DailyTask dailyTask = findDailyTaskById(lifeGoalId, dailyTaskId);
		Long taskStepId = dailyTaskSteps.getTaskStepId();
		TaskStep taskStep;

		if (Objects.isNull(taskStepId)) {
			taskStep = createTaskStep(lifeGoalId, dailyTaskId, dailyTaskSteps);
		} else {
			taskStep = findTaskStepById(lifeGoalId, dailyTaskId, taskStepId);
		}
		
			copyTaskStepFields(taskStep, dailyTaskSteps);
			
			taskStep.setDailyTask(dailyTask);
			dailyTask.getTaskSteps();
			lifeGoal.getDailyTasks();
			
		return new DailyTaskStep(taskStepDao.save(taskStep));
	}

	private void copyTaskStepFields(TaskStep taskStep, DailyTaskStep dailyTaskSteps) {
		taskStep.setStepOrder(dailyTaskSteps.getStepOrder());
		taskStep.setStepText(dailyTaskSteps.getStepText());
	}
	
	private TaskStep createTaskStep(Long lifeGoalId, Long dailyTaskId, DailyTaskStep dailyTaskSteps) {
		return new TaskStep();
	}
	
	private TaskStep findTaskStepById(Long lifeGoalId, Long dailyTaskId, Long taskStepId) {
		TaskStep taskStep = taskStepDao.findById(taskStepId).orElseThrow(
				() -> new NoSuchElementException("Task Step with ID = " + taskStepId + " was not found."));
		return taskStep;
	}
	
	@Transactional
	public List<LifeGoalData> retrieveAllLifeGoals() {
		List<LifeGoalData> result = new LinkedList<>();
		List<LifeGoal> lifeGoals = lifeGoalDao.findAll();
		
		for (LifeGoal lifeGoal : lifeGoals) {
			LifeGoalData lfd = new LifeGoalData(lifeGoal);
		
			result.add(lfd);
		}
		return result;
	}
	
	@Transactional
	public LifeGoalData retrieveLifeGoalById(Long lifeGoalId) {
		LifeGoalData results = new LifeGoalData(findLifeGoalById(lifeGoalId));
		return results;
	}
	

	public Map<String, String> deleteLifeGoalById(Long lifeGoalId) {
		LifeGoal lifeGoal = findLifeGoalById(lifeGoalId);
		lifeGoalDao.delete(lifeGoal);
		return Collections.singletonMap("Message", "Deleted successfully");
	}

	public Map<String, String> deleteDailyTaskById(Long lifeGoalId, Long dailyTaskId) {
		DailyTask dailyTask = findDailyTaskById(lifeGoalId, dailyTaskId);
		dailyTaskDao.delete(dailyTask);
		return Collections.singletonMap("Message", "Deleted daily task successfully");
	}
	
	
	

	


	
	
	
	

}
